generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_PRISMA")
}

enum Role {
  admin
  user
}

model User {
  id   String @id @db.Uuid
  role Role   @default(user)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Profile          Profile[]
  createdPrograms  Program[]     @relation("ProgramCreator") // Programs created by user
  enrolledPrograms UserProgram[] // Programs user is enrolled in

  @@map("user")
}

model Profile {
  id String @id @db.Uuid

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("profile")
}

enum UserProgramStatus {
  active
  completed
  cancelled
}

model UserProgram {
  userId     String
  programId  String
  enrolledAt DateTime          @default(now())
  status     UserProgramStatus @default(active)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  program Program @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@id([userId, programId])
  @@map("user_program")
}

model Program {
  id          String   @id @db.Uuid
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creatorId String @db.Uuid
  creator   User   @relation("ProgramCreator", fields: [creatorId], references: [id], onDelete: Cascade)

  enrolledUsers UserProgram[]

  TrainingProgram  TrainingProgram[]
  NutritionProgram NutritionProgram[]

  @@map("program")
}

model TrainingProgram {
  programId String  @id
  program   Program @relation(fields: [programId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("training_program")
}

model NutritionProgram {
  programId String  @id
  program   Program @relation(fields: [programId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("nutrition_program")
}
